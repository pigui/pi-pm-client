/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authControllerLoginWithPassword } from '../fn/auth/auth-controller-login-with-password';
import { AuthControllerLoginWithPassword$Params } from '../fn/auth/auth-controller-login-with-password';
import { authControllerRefreshToken } from '../fn/auth/auth-controller-refresh-token';
import { AuthControllerRefreshToken$Params } from '../fn/auth/auth-controller-refresh-token';
import { authControllerRegisterWithPassword } from '../fn/auth/auth-controller-register-with-password';
import { AuthControllerRegisterWithPassword$Params } from '../fn/auth/auth-controller-register-with-password';
import { AuthDto } from '../models/auth-dto';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authControllerRegisterWithPassword()` */
  static readonly AuthControllerRegisterWithPasswordPath = '/auth/register-with-password';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerRegisterWithPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerRegisterWithPassword$Response(params: AuthControllerRegisterWithPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthDto>> {
    return authControllerRegisterWithPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerRegisterWithPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerRegisterWithPassword(params: AuthControllerRegisterWithPassword$Params, context?: HttpContext): Observable<AuthDto> {
    return this.authControllerRegisterWithPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthDto>): AuthDto => r.body)
    );
  }

  /** Path part for operation `authControllerLoginWithPassword()` */
  static readonly AuthControllerLoginWithPasswordPath = '/auth/login-with-password';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerLoginWithPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerLoginWithPassword$Response(params: AuthControllerLoginWithPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthDto>> {
    return authControllerLoginWithPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerLoginWithPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerLoginWithPassword(params: AuthControllerLoginWithPassword$Params, context?: HttpContext): Observable<AuthDto> {
    return this.authControllerLoginWithPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthDto>): AuthDto => r.body)
    );
  }

  /** Path part for operation `authControllerRefreshToken()` */
  static readonly AuthControllerRefreshTokenPath = '/auth/refresh-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerRefreshToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerRefreshToken$Response(params: AuthControllerRefreshToken$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthDto>> {
    return authControllerRefreshToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerRefreshToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerRefreshToken(params: AuthControllerRefreshToken$Params, context?: HttpContext): Observable<AuthDto> {
    return this.authControllerRefreshToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthDto>): AuthDto => r.body)
    );
  }

}
